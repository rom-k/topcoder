#include <stdio.h>
#include <time.h>
#include <vector>
#include <list>
#include <set>
#include <string>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
#include <queue>
#include <map>
#include <iomanip>
#include <cmath>
#include <stack>
#include <numeric>
#include <iterator>
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <cfloat>
#include <utility>
#include <memory>
#include <functional>
#include <complex>

using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef vector<LL> VL;

#define FORE(it, c, T) for(T::iterator it = c.begin(); it != c.end(); it++)
#define FORI(i, n) for(int i = 0; i < (n); i++)
#define FORIS(i, s, n) for(int i = (s); i < (n); i++)
#define CLEAR(a) memset(a, 0, sizeof(a))
#define PB(n) push_back(n)
#define PI M_PI
#define EPS 1e-13

#define DEBUG 0
#define DBG(a) if (DEBUG) cout <<"DEBUG::: " <<a <<endl;
#define DBG2(a, b) if (DEBUG) cout <<"DEBUG::: " <<a <<"=" <<b <<endl;

class MafiaGame {
public:
	double probabilityToLose(int N, vector <int> decisions) {
		
		int Nv   = N;
		int Nmax = 0;
		int Vmax = 0;
		VI voted(N,0);
		
		FORI(i, decisions.size()) {
			int who = decisions[i];
			voted[who]++;
			if (Vmax < voted[who]) {
				Vmax = voted[who];
				Nmax = 1;
			}
			else if(Vmax == voted[who]) {
				Nmax++;
			}
		}
		
		while(1) {
			DBG2("N",N);
			DBG2("Nv",Nv);
			DBG2("Nmax",Nmax);
			DBG2("Vmax",Vmax);
			
			if (N >= Nv * Vmax) {
				break;
			}
			else if (N > Nv * (Vmax - 1) + Nmax) {
				Nv = N % Nv;
			}
			else {
				Nv = Nmax;
			}
		}
		
		double result = (double) 1. / Nv;
		while (Nv > 1) Nv = N % Nv;
		if (Nv == 0) return 0.;
		return result;
	}

	

};



// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor
