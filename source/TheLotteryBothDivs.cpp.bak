#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <climits>
#include <cfloat>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
using namespace std;
static const double EPS = 1e-5;
typedef long long ll;

class TheLotteryBothDivs {
public:
	bool operator() (const string& left, const string& right) const {
		string a=left;
		string b=right;
		reverse(a.begin(), a.end());
		reverse(b.begin(), b.end());
		for(int i=0; i<a.size() and i<b.size(); i++) {
			if ((int)a[i] < (int)b[i]) {return 1;}
			if ((int)a[i] > (int)b[i]) {return 0;}
		}
		return a.size() < b.size();
	}
	double find(vector <string> goodSuffixes) {
		//copy
		vector <string> copied(goodSuffixes.size());
		copy(goodSuffixes.begin(), goodSuffixes.end(), copied.begin());
		
		//sort
		std::sort(copied.begin(),copied.end(),*this);
		
		// //uniq
		// vector <string> ::iterator ep;
		// ep = unique(copied.begin(),copied.end());
		// copied.erase(ep, copied.end());
		
		for (int i=1;i<copied.size();i++) {
			string prev=copied[i-1];
			string curr=copied[i];
			reverse(prev.begin(), prev.end());
			reverse(curr.begin(), curr.end());
			string::size_type index = curr.find(prev);
			//cout <<"DEBUG::: think   " <<copied[i-1] <<" & " <<copied[i];
			if (index != string::npos
			and index == 0
			and prev.size() <= curr.size()) {
				//cout <<"=> REMOVE (" <<index <<")" <<endl;
				copied.erase(copied.begin()+i);
				i--;
			}
			else {
				//cout <<"=> REST" <<endl;
			}
		}
		
		//cout <<"DEBUG::: 1=>";
		//for(int i=0;i<goodSuffixes.size();i++){cout <<" " <<goodSuffixes[i];}
		//cout <<endl;
		//cout <<"DEBUG::: 2=>";
		//for(int i=0;i<copied.size();i++){cout <<" " <<copied[i];}
		//cout <<endl;
		
		double result=0;
		for (int i=0;i<copied.size();i++) {
			//cout <<"DEBUG::: " <<copied[i] <<" " <<copied[i].size() <<endl;
			result += pow((double)0.1, (double)copied[i].size());
		}
		
		return result;
	}

	
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); if ((Case == -1) || (Case == 7)) test_case_7(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const double &Expected, const double &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { string Arr0[] = {"4"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); double Arg1 = 0.1; verify_case(0, Arg1, find(Arg0)); }
	void test_case_1() { string Arr0[] = {"4", "7"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); double Arg1 = 0.2; verify_case(1, Arg1, find(Arg0)); }
	void test_case_2() { string Arr0[] = {"47", "47"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); double Arg1 = 0.01; verify_case(2, Arg1, find(Arg0)); }
	void test_case_3() { string Arr0[] = {"47", "58", "4747", "502"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); double Arg1 = 0.021; verify_case(3, Arg1, find(Arg0)); }
	void test_case_4() { string Arr0[] = {"8542861", "1954", "6", "523", "000000000", "5426", "8"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); double Arg1 = 0.201100101; verify_case(4, Arg1, find(Arg0)); }
	void test_case_7() { string Arr0[] = {"612829", "752829", "981832829", "413", "51829", "3829", "62385829", "747829", "8960", "914383829", "6749829", "730829", "696829", "91392829", "50458829", "459829", "351829", "4005", "829", "307", "64", "64829", "35829", "0883", "0859829", "501711829", "81829", "13829", "743829", "94829", "244829", "4370829", "46757829", "829", "62810", "700829", "462039829", "93082829", "2071829", "37588", "356829", "837612829", "5670829", "478829", "856443829", "4829", "2829", "829", "10829", "768475829"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); double Arg1 = 0.01332; verify_case(7, Arg1, find(Arg0)); }

// END CUT HERE

};

// BEGIN CUT HERE
int main() {
	TheLotteryBothDivs ___test;
	___test.run_test(-1);
}
// END CUT HERE
