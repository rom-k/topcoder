#include <stdio.h>
#include <time.h>
#include <vector>
#include <list>
#include <set>
#include <string>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
#include <queue>
#include <map>
#include <iomanip>
#include <cmath>
#include <stack>
#include <numeric>
#include <iterator>
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <cfloat>
#include <utility>
#include <memory>
#include <functional>
#include <complex>

using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef vector<LL> VL;

#define FORE(it, c, T) for(T::iterator it = c.begin(); it != c.end(); it++)
#define FORI(i, n) for(int i = 0; i < (n); i++)
#define FORIS(i, s, n) for(int i = (s); i < (n); i++)
#define CLEAR(a) memset(a, 0, sizeof(a))
#define SORT(a) sort(a.begin(), a.end())
#define REVERSE(a) reverse(a.begin(), a.end())
#define PB(n) push_back(n)
#define SZ(a) int((a).size())
#define IPOW(a,b) ((long long) pow((double)(a),(double)(b)))
#define PI M_PI
#define EPS 1e-13
#define INF 0x7f7f7f7f

#define DEBUG 1
#define DBG(a) if (DEBUG) cout <<"DEBUG::: " <<a <<endl;
#define DBG2(a, b) if (DEBUG) cout <<"DEBUG::: " <<a <<"=" <<b <<endl;

struct _checkpoint {
    double t;
    int c1, c2;
    
    inline bool operator < (const _checkpoint a) const {
        return t < a.t;
    }
};

//bool add_dup (int &dup[][], int car1, int car2) {
//    if (dup[car1][0] >= 0 and dup[car1][1] >= 0)
//    
//};

int main() {
    int T;
    cin >>T;
    cin.ignore();
    
    for(int t=1; t<=T; t++) {
        
        int N;
        cin >>N;
        
        char C[N];
        double S[N];
        double P[N];
        FORI(i, N) cin >>C[i] >>S[i] >>P[i];
        
        // original line
        char lin[N];
        FORI(i,N) lin[i] = ' ';
        // duplication matrix
        bool dup[N][N];
        FORI(i,N) FORI(j,N) {
            if (i>=j) continue;
            if (fabs(P[i]-P[j]) < 5.) {
                lin[i] = C[i];
                lin[j] = C[j];
                dup[i][j] = true;
                dup[j][i] = true;
            }
            else {
                dup[i][j] = false;
                dup[j][i] = false;
            }
        }
        
        // count up check points
        vector<_checkpoint> cp;
        FORI(i,N) FORI(j,N) {
            if (i>=j) continue;
            _checkpoint cp_new;
            cp_new.c1 = i;
            cp_new.c2 = j;
            
            cp_new.t = (P[i]-P[j]+5.)/(-S[i]+S[j]);
            if (0 <= cp_new.t and cp_new.t < INF) cp.PB(cp_new);
            
            cp_new.t = (P[i]-P[j]-5.)/(-S[i]+S[j]);
            if (0 <= cp_new.t and cp_new.t < INF) cp.PB(cp_new);
        }
        SORT(cp);
        
        double ret = -1;
        FORI(i,SZ(cp)) {
            double t = cp[i].t;
            int c1 = cp[i].c1;
            int c2 = cp[i].c2;
            double s1 = S[c1];
            double s2 = S[c2];
            double p1 = P[c1]+s1*t;
            double p2 = P[c2]+s2*t;
            if (p1 > p2) {
                int ctmp=c1; c1=c2; c2=ctmp;
                double stmp=s1; s1=s2; s2=stmp;
                double ptmp=p1; p1=p2; p2=ptmp;
            }
            
            if (DEBUG) cout <<"DEBUG::: t=" <<t <<endl;
            if (DEBUG) cout <<"DEBUG:::  c1=" <<c1 <<"\ts1=" <<s1 <<"\tp1=" <<p1 <<"\tlin=" <<lin[c1] <<endl;
            if (DEBUG) cout <<"DEBUG:::  c2=" <<c2 <<"\ts2=" <<s2 <<"\tp2=" <<p2 <<"\tlin=" <<lin[c2] <<endl;
            
            if (s1 > s2) { //in
                dup[c1][c2] = true;
                dup[c2][c1] = true;
                
                if (DEBUG) cout <<"DEBUG:::  =>in" <<endl;
                
                FORI(cx,N) {
                    double sx = S[cx];
                    double px = P[cx]+sx*t;
                    if(p1 < px and px < p2) {
                        ret = t;
                        break;
                    }
                }
                if (ret >= 0) break;
                
                if (lin[c1] == lin[c2] and lin[c1] != 'X') {
                    ret = t;
                    break;
                }
                else if(lin[c1] == 'R') lin[c2] = 'L';
                else if(lin[c1] == 'L') lin[c2] = 'R';
                else if(lin[c2] == 'R') lin[c1] = 'L';
                else if(lin[c2] == 'L') lin[c1] = 'R';
            }
            else { //out
                dup[c1][c2] = false;
                dup[c2][c1] = false;
                
                // re-calc lin
                lin[c1] = ' ';
                lin[c2] = ' ';
                FORI(i,N) {
                    if (i!=c1 and dup[c1][i]) {
                        if (lin[i] == 'L') lin[c1] = 'R';
                        if (lin[i] == 'R') lin[c1] = 'L';
                        if (lin[i] == 'X' and lin[c1] = ' ') lin[c1] = 'X';
                    }
                    if (i!=c2 and dup[c2][i]) {
                        if (lin[i] == 'L') lin[c2] = 'R';
                        if (lin[i] == 'R') lin[c2] = 'L';
                        if (lin[i] == 'X' and lin[c2] = ' ') lin[c2] = 'X';
                    }
                }
            }
            if (ret >= 0) break;
        }
        
        if (ret < 0) {
            cout <<"Case #" <<t <<": Possible" <<endl;
        }
        else {
            cout <<"Case #" <<t <<": " <<ret <<endl;
        }
        //printf("Case #%d: %.0lf\n", t, ret);
    }
    
    return 0;
}
