#include <stdio.h>
#include <time.h>
#include <vector>
#include <list>
#include <set>
#include <string>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
#include <queue>
#include <map>
#include <iomanip>
#include <cmath>
#include <stack>
#include <numeric>
#include <iterator>
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <cfloat>
#include <utility>
#include <memory>
#include <functional>
#include <complex>

using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef vector<LL> VL;

#define FORE(it, c, T) for(T::iterator it = c.begin(); it != c.end(); it++)
#define FORI(i, n) for(int i = 0; i < (n); i++)
#define FORIS(i, s, n) for(int i = (s); i < (n); i++)
#define CLEAR(a) memset(a, 0, sizeof(a))
#define SORT(a) sort(a.begin(), a.end())
#define REVERSE(a) reverse(a.begin(), a.end())
#define PB(n) push_back(n)
#define SZ(a) int((a).size())
#define IPOW(a,b) ((long long) pow((double)(a),(double)(b)))
#define PI M_PI
#define EPS 1e-13
#define INF 0x7f7f7f7f

#define DEBUG 1
#define DBG(a) if (DEBUG) cout <<"DEBUG::: " <<a <<endl;
#define DBG2(a, b) if (DEBUG) cout <<"DEBUG::: " <<a <<"=" <<b <<endl;
#define DBG3(a, b, c) if (DEBUG) cout <<"DEBUG::: " <<a <<":" <<b <<":" <<c <<endl;

/*
 * _edge struct
 */
struct _edge {
    double x1;
    double y1;
    double x2;
    double y2;
    _edge (double x10, double y10, double x20, double y20) {
        x1 = x10; y1 = y10; x2 = x20; y2 = y20;
    }
    inline bool parallel (const _edge a) const {
        return (x2-x1)*(a.x2-a.x1) + (y2-y1)*(a.y2-a.y1) > 0;
    }
    inline bool includes (const _edge a) const {
        _edge b = _edge(x1, y1, a.x1, a.y1);
        return parallel(a) and parallel(b);
    }
};

/*
 * get_around function
 * Get edges full circle from a part of edge e0.
 */
void get_around (int H, int W, string blocks[], _edge e0, vector<_edge> &edges) {
    DBG("  get_around");
    DBG3("  (e0.x1:e0.y1)",e0.x1,e0.y1);
    DBG3("  (e0.x2:e0.y2)",e0.x2,e0.y2);
    
    DBG2("  SZ(edges)",SZ(edges));
    FORI(i, SZ(edges)) {
        if (edges[i].includes(e0)) {
            DBG("  => included");
            return;
        }
    }
    
    _edge e = _edge(e0.x1, e0.y1, e0.x2, e0.y2);
    double x0 = e.x1;
    double y0 = e.y1;
    double dx = e.x2 - e.x1;
    double dy = e.y2 - e.y1;
    
    while (e.x2 != x0 or e.y2 != y0) {
        double ddx = -dy;
        double ddy = dx;
        double x3 = e.x2 + 0.5 + 0.5*(dx+dy);
        double y3 = e.y2 + 0.5 + 0.5*(-dx+dy);
        DBG("----");
        DBG3("    (dx    :dy    )",dx,dy);
        DBG3("    (ddx   :ddy   )",ddx,ddy);
        DBG3("    (x3    :y3    )",x3,y3);
        DBG3("    (x3+ddx:y3+ddy)",x3+ddx,y3+ddy);
        
        if (x3 < 0 or W <= x3 or y3 < 0 or H <= y3 or
            x3+ddx < 0 or W <= x3+ddx or y3+ddy < 0 or H <= y3+ddy)
        {
            cout <<"ERROR" <<endl;
            return;
        }
        
        if (blocks[(int)(x3)][(int)(y3)] == '#' and
            blocks[(int)(x3+ddx)][(int)(y3+ddy)] != '#')
        {
            DBG("    ->go straight");
            e.x2 += dx; e.y2 += dy;
        }
        else {
            edges.PB(e);
            DBG("    ->corner");
            DBG3("     add edge (x1,y1)",e.x1,e.y1);
            DBG3("              (x2,y2)",e.x2,e.y2);
            
            if (blocks[(int)(x3)][(int)(x3)] == '#' and
                blocks[(int)(x3+ddx)][(int)(x3+ddy)] != '#')
            {
                dx = ddx; dy = ddy;
                dx *= -1; dy *= -1;
                DBG("     ->turn left");
            }
            else {
                dx = ddx; dy = ddy;
                DBG("     ->turn right");
            }
            e.x1 = e.x2; e.y1 = e.y2;
            e.x2 += dx; e.y2 += dy;
        }
    }
    DBG("----end");
    
    //fix first edge's start point
    if (e.parallel(e0)) {
        FORI(i, SZ(edges)) {
            if (edges[i].x1 == e0.x1 and
                edges[i].y1 == e0.y1 and
                edges[i].parallel(e0))
            {
                edges[i].x1 = e.x1;
                edges[i].y1 = e.y1;
                DBG3("  fix first edge (x1,y1)",e.x1,edges[i].y1);
                DBG3("                 (x2,y2)",e.x2,edges[i].y2);
                return;
            }
        }
    }
    
    edges.PB(e);
    DBG3("  add edge (x1,y1)",e.x1,e.y1);
    DBG3("           (x2,y2)",e.x2,e.y2);
    return;
};

/*
 * main funtion
 */
int main() {
    int T;
    cin >>T;
    cin.ignore();
    
    for(int t=1; t<=T; t++) {
        
        //input
        int H, W, D;
        cin >>H >>W >>D;
        string blocks[H];
        FORI(i, H) cin >>blocks[i];
        DBG2("H", H);
        DBG2("W", W);
        DBG2("D", D);
        
        //initialize
        double xme, yme;
        vector<_edge> edges;
        FORI(y, H) FORI(x, W) {
            DBG3(" (x:y)",x, y);
            
            if (blocks[y][x] == 'X') {
                xme = x + 0.5;
                yme = y + 0.5;
                DBG3(" (xme:yme)",xme,yme);
            }
            
            if (x == W-1) continue;
            if (y == H-1) continue;
            DBG3(" blocks",blocks[y][x],blocks[y][x+1]);
            DBG3("       ",blocks[y+1][x],blocks[y+1][x+1]);
            
            _edge e(x, y, 0, 0);
            if (blocks[y][x]   == '#' and blocks[y][x+1]   != '#') {
                e.x2 = x; e.y2 = y-1;
                get_around(H, W, blocks, e, edges);
            }
            if (blocks[y][x+1] == '#' and blocks[y+1][x+1] != '#') {
                e.x2 = x+1; e.y2 = y;
                get_around(H, W, blocks, e, edges);
            }
            if (blocks[y+1][x+1] == '#' and blocks[y+1][x] != '#') {
                e.x2 = x; e.y2 = y+1;
                get_around(H, W, blocks, e, edges);
            }
            if (blocks[y+1][x]   == '#' and blocks[y][x]   != '#') {
                e.x2 = x-1; e.y2 = y;
                get_around(H, W, blocks, e, edges);
            }
        }
        
//        //start loop
//        set<_point>::iterator it = corners.begin();
//        while (it != corners.end()) {
//            
//        }
        
        int ret = 0;
        cout <<"Case #" <<t <<": " <<ret <<endl;
    }
    
    return 0;
}

